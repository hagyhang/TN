/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package middleware;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-19")
public class TSummaryPage implements org.apache.thrift.TBase<TSummaryPage, TSummaryPage._Fields>, java.io.Serializable, Cloneable, Comparable<TSummaryPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSummaryPage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHORT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDesc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGE_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("imageSrc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSrc", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSummaryPageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSummaryPageTupleSchemeFactory();

  public java.lang.String id; // optional
  public java.lang.String link; // optional
  public java.lang.String title; // optional
  public java.lang.String description; // optional
  public java.lang.String shortDesc; // optional
  public java.lang.String imageSrc; // optional
  public java.lang.String pageSrc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LINK((short)2, "link"),
    TITLE((short)3, "title"),
    DESCRIPTION((short)4, "description"),
    SHORT_DESC((short)5, "shortDesc"),
    IMAGE_SRC((short)6, "imageSrc"),
    PAGE_SRC((short)7, "pageSrc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LINK
          return LINK;
        case 3: // TITLE
          return TITLE;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // SHORT_DESC
          return SHORT_DESC;
        case 6: // IMAGE_SRC
          return IMAGE_SRC;
        case 7: // PAGE_SRC
          return PAGE_SRC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ID,_Fields.LINK,_Fields.TITLE,_Fields.DESCRIPTION,_Fields.SHORT_DESC,_Fields.IMAGE_SRC,_Fields.PAGE_SRC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_DESC, new org.apache.thrift.meta_data.FieldMetaData("shortDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_SRC, new org.apache.thrift.meta_data.FieldMetaData("imageSrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_SRC, new org.apache.thrift.meta_data.FieldMetaData("pageSrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSummaryPage.class, metaDataMap);
  }

  public TSummaryPage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSummaryPage(TSummaryPage other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetShortDesc()) {
      this.shortDesc = other.shortDesc;
    }
    if (other.isSetImageSrc()) {
      this.imageSrc = other.imageSrc;
    }
    if (other.isSetPageSrc()) {
      this.pageSrc = other.pageSrc;
    }
  }

  public TSummaryPage deepCopy() {
    return new TSummaryPage(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.link = null;
    this.title = null;
    this.description = null;
    this.shortDesc = null;
    this.imageSrc = null;
    this.pageSrc = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public TSummaryPage setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getLink() {
    return this.link;
  }

  public TSummaryPage setLink(java.lang.String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public TSummaryPage setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public TSummaryPage setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public java.lang.String getShortDesc() {
    return this.shortDesc;
  }

  public TSummaryPage setShortDesc(java.lang.String shortDesc) {
    this.shortDesc = shortDesc;
    return this;
  }

  public void unsetShortDesc() {
    this.shortDesc = null;
  }

  /** Returns true if field shortDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDesc() {
    return this.shortDesc != null;
  }

  public void setShortDescIsSet(boolean value) {
    if (!value) {
      this.shortDesc = null;
    }
  }

  public java.lang.String getImageSrc() {
    return this.imageSrc;
  }

  public TSummaryPage setImageSrc(java.lang.String imageSrc) {
    this.imageSrc = imageSrc;
    return this;
  }

  public void unsetImageSrc() {
    this.imageSrc = null;
  }

  /** Returns true if field imageSrc is set (has been assigned a value) and false otherwise */
  public boolean isSetImageSrc() {
    return this.imageSrc != null;
  }

  public void setImageSrcIsSet(boolean value) {
    if (!value) {
      this.imageSrc = null;
    }
  }

  public java.lang.String getPageSrc() {
    return this.pageSrc;
  }

  public TSummaryPage setPageSrc(java.lang.String pageSrc) {
    this.pageSrc = pageSrc;
    return this;
  }

  public void unsetPageSrc() {
    this.pageSrc = null;
  }

  /** Returns true if field pageSrc is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSrc() {
    return this.pageSrc != null;
  }

  public void setPageSrcIsSet(boolean value) {
    if (!value) {
      this.pageSrc = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case SHORT_DESC:
      if (value == null) {
        unsetShortDesc();
      } else {
        setShortDesc((java.lang.String)value);
      }
      break;

    case IMAGE_SRC:
      if (value == null) {
        unsetImageSrc();
      } else {
        setImageSrc((java.lang.String)value);
      }
      break;

    case PAGE_SRC:
      if (value == null) {
        unsetPageSrc();
      } else {
        setPageSrc((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LINK:
      return getLink();

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case SHORT_DESC:
      return getShortDesc();

    case IMAGE_SRC:
      return getImageSrc();

    case PAGE_SRC:
      return getPageSrc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LINK:
      return isSetLink();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case SHORT_DESC:
      return isSetShortDesc();
    case IMAGE_SRC:
      return isSetImageSrc();
    case PAGE_SRC:
      return isSetPageSrc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSummaryPage)
      return this.equals((TSummaryPage)that);
    return false;
  }

  public boolean equals(TSummaryPage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_shortDesc = true && this.isSetShortDesc();
    boolean that_present_shortDesc = true && that.isSetShortDesc();
    if (this_present_shortDesc || that_present_shortDesc) {
      if (!(this_present_shortDesc && that_present_shortDesc))
        return false;
      if (!this.shortDesc.equals(that.shortDesc))
        return false;
    }

    boolean this_present_imageSrc = true && this.isSetImageSrc();
    boolean that_present_imageSrc = true && that.isSetImageSrc();
    if (this_present_imageSrc || that_present_imageSrc) {
      if (!(this_present_imageSrc && that_present_imageSrc))
        return false;
      if (!this.imageSrc.equals(that.imageSrc))
        return false;
    }

    boolean this_present_pageSrc = true && this.isSetPageSrc();
    boolean that_present_pageSrc = true && that.isSetPageSrc();
    if (this_present_pageSrc || that_present_pageSrc) {
      if (!(this_present_pageSrc && that_present_pageSrc))
        return false;
      if (!this.pageSrc.equals(that.pageSrc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLink()) ? 131071 : 524287);
    if (isSetLink())
      hashCode = hashCode * 8191 + link.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetShortDesc()) ? 131071 : 524287);
    if (isSetShortDesc())
      hashCode = hashCode * 8191 + shortDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageSrc()) ? 131071 : 524287);
    if (isSetImageSrc())
      hashCode = hashCode * 8191 + imageSrc.hashCode();

    hashCode = hashCode * 8191 + ((isSetPageSrc()) ? 131071 : 524287);
    if (isSetPageSrc())
      hashCode = hashCode * 8191 + pageSrc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSummaryPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShortDesc()).compareTo(other.isSetShortDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDesc, other.shortDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImageSrc()).compareTo(other.isSetImageSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageSrc, other.imageSrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPageSrc()).compareTo(other.isSetPageSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSrc, other.pageSrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSummaryPage(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetLink()) {
      if (!first) sb.append(", ");
      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetShortDesc()) {
      if (!first) sb.append(", ");
      sb.append("shortDesc:");
      if (this.shortDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.shortDesc);
      }
      first = false;
    }
    if (isSetImageSrc()) {
      if (!first) sb.append(", ");
      sb.append("imageSrc:");
      if (this.imageSrc == null) {
        sb.append("null");
      } else {
        sb.append(this.imageSrc);
      }
      first = false;
    }
    if (isSetPageSrc()) {
      if (!first) sb.append(", ");
      sb.append("pageSrc:");
      if (this.pageSrc == null) {
        sb.append("null");
      } else {
        sb.append(this.pageSrc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSummaryPageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSummaryPageStandardScheme getScheme() {
      return new TSummaryPageStandardScheme();
    }
  }

  private static class TSummaryPageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSummaryPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSummaryPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.link = iprot.readString();
              struct.setLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHORT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortDesc = iprot.readString();
              struct.setShortDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGE_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageSrc = iprot.readString();
              struct.setImageSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageSrc = iprot.readString();
              struct.setPageSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSummaryPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.link != null) {
        if (struct.isSetLink()) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          oprot.writeString(struct.link);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortDesc != null) {
        if (struct.isSetShortDesc()) {
          oprot.writeFieldBegin(SHORT_DESC_FIELD_DESC);
          oprot.writeString(struct.shortDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageSrc != null) {
        if (struct.isSetImageSrc()) {
          oprot.writeFieldBegin(IMAGE_SRC_FIELD_DESC);
          oprot.writeString(struct.imageSrc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageSrc != null) {
        if (struct.isSetPageSrc()) {
          oprot.writeFieldBegin(PAGE_SRC_FIELD_DESC);
          oprot.writeString(struct.pageSrc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSummaryPageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSummaryPageTupleScheme getScheme() {
      return new TSummaryPageTupleScheme();
    }
  }

  private static class TSummaryPageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSummaryPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSummaryPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLink()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetShortDesc()) {
        optionals.set(4);
      }
      if (struct.isSetImageSrc()) {
        optionals.set(5);
      }
      if (struct.isSetPageSrc()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLink()) {
        oprot.writeString(struct.link);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetShortDesc()) {
        oprot.writeString(struct.shortDesc);
      }
      if (struct.isSetImageSrc()) {
        oprot.writeString(struct.imageSrc);
      }
      if (struct.isSetPageSrc()) {
        oprot.writeString(struct.pageSrc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSummaryPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.link = iprot.readString();
        struct.setLinkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shortDesc = iprot.readString();
        struct.setShortDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.imageSrc = iprot.readString();
        struct.setImageSrcIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pageSrc = iprot.readString();
        struct.setPageSrcIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

