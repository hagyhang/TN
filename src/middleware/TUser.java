/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package middleware;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-19")
public class TUser implements org.apache.thrift.TBase<TUser, TUser._Fields>, java.io.Serializable, Cloneable, Comparable<TUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUser");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FULL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUserTupleSchemeFactory();

  public java.lang.String id; // optional
  public java.lang.String loginName; // optional
  public java.lang.String password; // optional
  public java.lang.String fullName; // optional
  public java.lang.String rule; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LOGIN_NAME((short)2, "loginName"),
    PASSWORD((short)3, "password"),
    FULL_NAME((short)4, "fullName"),
    RULE((short)5, "rule");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LOGIN_NAME
          return LOGIN_NAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // FULL_NAME
          return FULL_NAME;
        case 5: // RULE
          return RULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ID,_Fields.LOGIN_NAME,_Fields.PASSWORD,_Fields.FULL_NAME,_Fields.RULE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_NAME, new org.apache.thrift.meta_data.FieldMetaData("fullName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUser.class, metaDataMap);
  }

  public TUser() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUser(TUser other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetFullName()) {
      this.fullName = other.fullName;
    }
    if (other.isSetRule()) {
      this.rule = other.rule;
    }
  }

  public TUser deepCopy() {
    return new TUser(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.loginName = null;
    this.password = null;
    this.fullName = null;
    this.rule = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public TUser setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getLoginName() {
    return this.loginName;
  }

  public TUser setLoginName(java.lang.String loginName) {
    this.loginName = loginName;
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public TUser setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public java.lang.String getFullName() {
    return this.fullName;
  }

  public TUser setFullName(java.lang.String fullName) {
    this.fullName = fullName;
    return this;
  }

  public void unsetFullName() {
    this.fullName = null;
  }

  /** Returns true if field fullName is set (has been assigned a value) and false otherwise */
  public boolean isSetFullName() {
    return this.fullName != null;
  }

  public void setFullNameIsSet(boolean value) {
    if (!value) {
      this.fullName = null;
    }
  }

  public java.lang.String getRule() {
    return this.rule;
  }

  public TUser setRule(java.lang.String rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case FULL_NAME:
      if (value == null) {
        unsetFullName();
      } else {
        setFullName((java.lang.String)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOGIN_NAME:
      return getLoginName();

    case PASSWORD:
      return getPassword();

    case FULL_NAME:
      return getFullName();

    case RULE:
      return getRule();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOGIN_NAME:
      return isSetLoginName();
    case PASSWORD:
      return isSetPassword();
    case FULL_NAME:
      return isSetFullName();
    case RULE:
      return isSetRule();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TUser)
      return this.equals((TUser)that);
    return false;
  }

  public boolean equals(TUser that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_fullName = true && this.isSetFullName();
    boolean that_present_fullName = true && that.isSetFullName();
    if (this_present_fullName || that_present_fullName) {
      if (!(this_present_fullName && that_present_fullName))
        return false;
      if (!this.fullName.equals(that.fullName))
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginName()) ? 131071 : 524287);
    if (isSetLoginName())
      hashCode = hashCode * 8191 + loginName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetFullName()) ? 131071 : 524287);
    if (isSetFullName())
      hashCode = hashCode * 8191 + fullName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
    if (isSetRule())
      hashCode = hashCode * 8191 + rule.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFullName()).compareTo(other.isSetFullName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullName, other.fullName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUser(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetLoginName()) {
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetFullName()) {
      if (!first) sb.append(", ");
      sb.append("fullName:");
      if (this.fullName == null) {
        sb.append("null");
      } else {
        sb.append(this.fullName);
      }
      first = false;
    }
    if (isSetRule()) {
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TUserStandardScheme getScheme() {
      return new TUserStandardScheme();
    }
  }

  private static class TUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginName = iprot.readString();
              struct.setLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FULL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullName = iprot.readString();
              struct.setFullNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rule = iprot.readString();
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginName != null) {
        if (struct.isSetLoginName()) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fullName != null) {
        if (struct.isSetFullName()) {
          oprot.writeFieldBegin(FULL_NAME_FIELD_DESC);
          oprot.writeString(struct.fullName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rule != null) {
        if (struct.isSetRule()) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TUserTupleScheme getScheme() {
      return new TUserTupleScheme();
    }
  }

  private static class TUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginName()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetFullName()) {
        optionals.set(3);
      }
      if (struct.isSetRule()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLoginName()) {
        oprot.writeString(struct.loginName);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetFullName()) {
        oprot.writeString(struct.fullName);
      }
      if (struct.isSetRule()) {
        oprot.writeString(struct.rule);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginName = iprot.readString();
        struct.setLoginNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fullName = iprot.readString();
        struct.setFullNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rule = iprot.readString();
        struct.setRuleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

